Basically all these polyfill will start with
return new Promise((resolve,reject)=>{

})

PromiseAll

1. The PromiseAll takes iterable of promises as inputy and return a single promise.
2. It waits for all promises to resolve or for any to reject.
3. It reject immediately with value of the first promise that rejects,discarding the results of all the other promises

Implementation to remember

1. basically return a new promise and create and empty array to push the results of the promise
2. loop through the array and resolve each promise and decrement the pending that is the length of the promises

PromiseAllSettled

1. The PromiseAll takes iterable of promises as input and return an array of object where each object representing each promise.
2. with each object having status key and reason key where status value would be either resolved or rejected and reason key will be the reason for rejection

Implementation to remember

1. since it return an array of objects push the each object to the array.
2. and decrement the pending in the finally method and check if empty array then resolve it with the empty array

Promise.race

1. It takes iterable of promises and returns the first rejected or resolved promise[returns a single value]

implementation to remember

1. first check if the promise array is an array or not if not reject with throw new TypeError("Input is not a an array").
2. and loop through each promise and resolve them with then(resolve) catch(reject)

Promise.any

1. Waits for the first promise to resolve.
2. reject when all the promises are rejected with Aggregate Error("All promises were rejected")
3. returns the first resolved value (or the Aggregate error)

Implementation to remember

1. create variabiles erros = []
   rejectedCount = 0, totalPromises=promises.length;
   if(totalPromises === 0) return reject(new AggregateError([],|"All promises were rejected")).

2. then loop through each promies in the array and resolve it and focus on error part
   and if error is there push it to the empty erros array and increment the rejectedCount++ and check the length of the totall promises and rejectedCount if not equal then return the new AggregateError
